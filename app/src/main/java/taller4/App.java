/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;



public class App {
    

    public static void main(String[] args) {
        
        //Coloque los llamados a cada función de acuerdo con cada enunciado
        //codifique el control de errores para el main


    }

    /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */
    public static String impares(int n){
        try {
            final byte MIN = 100;
            final short MAX = 500;
            if (n < MIN || n > MAX ) return "Por favor ingrese un número entre 100 y 500";

            String texto = "";
            // Contador porque si se hace con lenght() toma en cuenta las ;
            short contador = 1;
            for (int i = 0; i < n; i++) {
                if (i % 2 != 0){
                    texto += (i);
                    if (contador % 8 == 0) texto += "\n";
                    else texto += ";";
                    contador ++;

                }
            }
            return texto;
        } catch (Exception e) {
            return "Ha ocurrido un error\n" + e.toString();
        }

    }

    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */
    public static String fibonacci(int n) {
        try {
            if (n < 2) {
                return "El número debe ser 2 o mayor";
            }

            StringBuilder serie = new StringBuilder("01");
            int n1 = 0;
            int n2 = 1;
            int n3;

            for (int i = 2; i < n; i++) {
                n3 = n1 + n2;
                serie.append(n3);
                n1 = n2;
                n2 = n3;
            }

            return serie.toString();
        } catch (Exception e) {
            return "Ha ocurrido un error\n" + e.toString();
        }
    }

    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.

       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.

    */
    public static void raiz_aleatoria(){
        try {
            final byte MIN = 2;
            final short MAX = 355;

            int n = (int) (Math.random() * (MAX - MIN) + MIN);
            double raiz = Math.sqrt(n);

            System.out.println(String.format("Numero: %s Raiz: %.2f", n, raiz));
        }
        catch (Exception e){
            System.out.println("Ha ocurrido un error");
        }
    }




    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.

        Llame la función desde el main e imprimir el resultado arrojado.
    */
    public static String pares_en_rango(int n1, int n2){
        try {
            if (n1 >= n2) return "Se necesita que el primer numero sea menor que el segundo numero";

            final byte MIN = 20;
            final short MAX = 30;
            final short NOVECIENTOS = 900;

            short cantidad_pares = 0;
            int aleatorio;
            for (int i = 0; i < NOVECIENTOS; i++) {
                aleatorio = (int) (Math.random() * (MAX - MIN) + MIN);
                if (aleatorio % 2 == 0 ){
                    cantidad_pares++;
                }
            }
            return Short.toString(cantidad_pares);
        } catch (Exception e) {
            return "Ha ocurrido un error";
        }
    }




    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.

        Llame la función desde el main e imprimir el resultado arrojado.

      
    */
    public static int sumatoria_aleatorios(int cant_aleatorios){
        try {
            final byte MIN = 0;
            if (cant_aleatorios <= MIN) return -1;

            int suma = 0;
            for (int i = 0; i < cant_aleatorios; i++) {
                suma += (int) (Math.random() * 10);
            }
            return suma;
        }
        catch (Exception e){
            return -1;
        }
    }


    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:

            La lotería tiene 20 premios. 

            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.

            Ejemplo: 5698-101

            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):

            Sorteo # nn - Número Premiado nnnn - Serie nnn

            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101

            Para tener en cuenta la forma en la cual se informan los 20 resultados: 

            Del premio 20 al 6 el programa imprime: 

            ======PREMIOS MENORES=======
            y la lista de los 15 premios 

            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos

            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor

            Nota: para sacar el premio mayor calcule el random por cada número, como lo hacen en la realidad los sorteos.

            La función no recibe parámetros y devuelve un string con toda la lista de premios. El main, invoca la función 
            e imprime el resultado que esta arroje. 


     * 
     * 
    */
    public static String premios(){
        try {
            StringBuilder lista_premios = new StringBuilder();
            short numero_ganador;
            short serie;

            final short MIN = 100;
            final short MAX = 150;

            final byte UNO = 1;
            final byte CINCO = 5;
            final byte DIEZ = 10;
            final byte VEINTE = 20;
            final short DIEZ_MIL = 10000;

            StringBuilder premio_mayor = new StringBuilder();

            for (int i = 20; i > 0 ; i--) {
                if (i == VEINTE){
                    lista_premios.append("======PREMIOS MENORES=======\n");
                } else if (i == CINCO) {
                    lista_premios.append("======PREMIOS SECOS=========\n");
                } else if (i == UNO) {
                    lista_premios.append("======PREMIO MAYOR=========\n");
                    for (int j = 0; j < 4; j++) {
                        numero_ganador = (short) (Math.random() * DIEZ);
                        premio_mayor.append(numero_ganador);
                    }
                    serie = (short) (Math.random() * (MAX - MIN + UNO) + MIN);

                    lista_premios.append(String.format("Sorteo # %s - Número Premiado %s - Serie %s", i, premio_mayor, serie));
                    break;
                }
                numero_ganador = (short) (Math.random() * DIEZ_MIL);
                serie = (short) (Math.random() * (MAX - MIN + UNO) + MIN);

                lista_premios.append(String.format("Sorteo # %s - Número Premiado %04d - Serie %s\n", i, numero_ganador, serie));

            }

            return lista_premios.toString();
        }
        catch (Exception e) {
            return "Ha ocurrido un error";
        }
    }

}
